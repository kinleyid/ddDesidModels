df <- Reduce(function(x, y) merge(x, y, all = TRUE), metrics_tables)
View(df)
df <- Reduce(function(x, y) merge(x, y), metrics_tables)
View(df)
df <- Reduce(function(x, y) merge(x, y, all = TRUE), metrics_tables)
metrics_tables[[1]]
merge(metrics_tables[[1]], metrics_tables[[2]])
merge(metrics_tables[[1]], metrics_tables[[3]])
merge(metrics_tables[[1]], metrics_tables[[4]])
length(metrics_tables)
merge(metrics_tables[[1]], metrics_tables[[5]])
metrics_tables[[1]]
metrics_tables[[5]]
metrics_files <- list.files(path = metrics_path,
pattern = 'metrics-.*-wynn.csv',
full.names = T)
metrics_files <- list.files(path = metrics_path,
pattern = 'metrics-.*-wynn.csv',
full.names = T)
metrics_tables <- sapply(metrics_files, read.csv, simplify = F)
df <- Reduce(function(x, y) merge(x, y, all = TRUE), metrics_tables)
View(df)
metrics_files <- list.files(path = metrics_path,
pattern = 'metrics-.*-wynn.csv',
full.names = T)
metrics_tables <- sapply(metrics_files, read.csv, simplify = F)
df <- Reduce(function(x, y) merge(x, y, all = TRUE), metrics_tables)
View(df)
df$sequentiality_mean_seq_hT - df$sequentiality_mean_seq_h
hist(df$sequentiality_mean_seq_hT - df$sequentiality_mean_seq_h)
main_metrics <- data.frame(
score = df$SchemaRVG,
usemst = df$usemst_sum_mst_weight,
cnet = log(df$cnet_n_edges),
swow = df$swow_mean_efficiency,
seq = df$sequentiality_mean_seq_hT - df$sequentiality_mean_seq_h
)
cor(main_metrics)
plot(main_metrics$seq ~ main_metrics$score)
main_metrics <- data.frame(
score = (df$SchemaRVG + df$SchemaEH + df$SchemaJW) / 3,
usemst = df$usemst_sum_mst_weight,
cnet = log(df$cnet_n_edges),
swow = df$swow_mean_efficiency,
seq = df$sequentiality_mean_seq_hT - df$sequentiality_mean_seq_h
)
cor(main_metrics)
plot(main_metrics$cnet ~ main_metrics$usemst)
plot(main_metrics$cnet ~ main_metrics$score)
plot(main_metrics$seq ~ main_metrics$score)
summary(lm(main_metrics$seq ~ main_metrics$score))
cor.test(main_metrics$seq, main_metrics$score)
cor(main_metrics)
cor(main_metrics$seq ~ main_metrics$usemst)
plot(main_metrics$seq ~ main_metrics$usemst)
source("C:/Users/isaac/Projects/schemas/code/prolific-data-parsing/parse-expt-3.R")
stimset
sdf
sdf$stimset_n
sdf$stimset
names(sdf)
# Inter-rater reliability
mean_cors <- by(df, df$stimset_n, function(sdf) {
stimset <- sdf$stimset_n[1]
n_raters <- length(unique(sdf$id))
cat(sprintf('Stimset %s: %s raters\n', stimset, n_raters))
sdf$rater <- as.numeric(factor(sdf$id))
if (n_raters < 2) {
return(NULL)
}
rater_pairs <- asplit(combn(n_raters, 2), MARGIN = 2)
cors <- rep(NA, length(rater_pairs))
for (pair_idx in seq_along(rater_pairs)) {
rater_pair <- rater_pairs[[pair_idx]]
pair_subset <- subset(sdf, rater %in% rater_pair)
pair_subset$rater <- as.numeric(factor(pair_subset$rater)) # Rename to 1 and 2
wide <- reshape(pair_subset[c('rater', 'narrative_id', 'total_score')],
direction = 'wide', v.names = 'total_score', idvar = 'narrative_id', timevar = 'rater')
cors[pair_idx] <- cor(wide$total_score.1, wide$total_score.2)
}
data.frame(
stimset = stimset,
agreement = mean(cors)
)
}, simplify = F)
mean_cors <- do.call(rbind, mean_cors)
mean_cors
hist(mean_cors, breaks = 100)
hist(mean_cors$agreement, breaks = 100)
tt <- t.test(mean_cors$agreement)
print(tt$estimate)
print(tt$conf.int)
# Mean scores for each narrative
aggd <- aggregate(total_score ~ triplet_id + memType, df, mean)
# Get the beginning of the story for each narrative and attach it to the rating data
# This will let us double check the alignment later
scores_and_ids <- merge(aggregate(total_score ~ narrative_id, data = df, mean),
aggregate(story_start ~ narrative_id, df, unique),
by = 'narrative_id')
hippocorpus <- read.csv(file.path(proj_path, 'transcripts', 'raw', 'hippocorpus.csv'))
hippocorpus$narrative_id <- paste(hippocorpus$triplet_id, hippocorpus$memType, sep = '-')
hippocorpus <- subset(hippocorpus, narrative_id %in% scores_and_ids$narrative_id)
merged <- merge(hippocorpus, scores_and_ids, by = 'narrative_id')
if (!all(merged$story_start == substr(merged$TRANSCRIPT, 1, 100))) {
print('Error!!!!! Ratings and transcripts do not align')
}
library(afex)
proj_path <- 'C:/Users/isaac/Projects/ebdm'
df <- read.csv(file.path(proj_path, 'motor_data_8.30.2024.csv'))
# Compute running total of effort produced
with_fatigue <- by(df, df$ID, function(ptpt) {
running_total <- c(0, cumsum(ifelse(is.na(ptpt$impulse), 0, ptpt$impulse)))[1:nrow(ptpt)]
ptpt$impulse_cumsum <- running_total
return(ptpt)
}, simplify = F)
df <- do.call(rbind, with_fatigue)
rownames(df) <- NULL
# Let's look just at money
df <- subset(df, rew_type == 'money')
df <- subset(df, force_ppn == 1)
summary(lm(impulse ~ impulse_cumsum, data = df))
summary(glm(enough_force ~ impulse_cumsum, data = df, family = binomial))
summary(glm(enough_force ~ impulse_cumsum + rew_mag, data = df, family = binomial))
proj_path <- 'C:/Users/isaac/Projects/ebdm'
df <- read.csv(file.path(proj_path, 'motor_data_8.30.2024.csv'))
# Compute running total of effort produced
with_fatigue <- by(df, df$ID, function(ptpt) {
running_total <- c(0, cumsum(ifelse(is.na(ptpt$impulse), 0, ptpt$impulse)))[1:nrow(ptpt)]
ptpt$impulse_cumsum <- running_total
return(ptpt)
}, simplify = F)
df <- do.call(rbind, with_fatigue)
rownames(df) <- NULL
# What might change with fatigue?
summary(glm(enough_force ~ impulse_cumsum, data = df, family = binomial))
# What might change with fatigue?
summary(glm(enough_force ~ impulse_cumsum * force_ppn, data = df, family = binomial))
# What might change with fatigue?
summary(glm(enough_force ~ impulse_cumsum * force_ppn * rew_mag, data = df, family = binomial))
# What might change with fatigue?
summary(glm(enough_force ~ impulse_cumsum + force_ppn, data = df, family = binomial))
hist(df$impulse)
hist(log(df$impulse))
summary(lm(log(impulse) ~ impulse_cumsum + force_ppn, data = df, family = binomial))
summary(glm(enough_force ~ impulse + impulse_cumsum + force_ppn, data = df, family = binomial))
summary(glm(enough_force ~ trial_duration + impulse_cumsum + force_ppn, data = df, family = binomial))
summary(glm(enough_force ~ trial_duration + impulse_cumsum + force_ppn, data = df, family = binomial))
summary(glm(enough_force ~ log(trial_duration) + impulse_cumsum + force_ppn, data = df, family = binomial))
df$max_trial_force_ppn
df$max_force_time
hist(df$max_force_time)
hist(log(df$max_force_time))
summary(lm(log(impulse) ~ impulse_cumsum + force_ppn, data = df))
summary(lm(max_force_time ~ impulse_cumsum + force_ppn, data = df))
df$force_duration <- df$max_force_time - df$force_start
summary(lm(force_duration ~ impulse_cumsum + force_ppn, data = df))
hist(df$n_fatigue)
summary(lm(max_force_time ~ impulse_cumsum + force_ppn, data = df))
df$first_fatigue
table(!is.na(df$first_fatigue), df$n_fatigue > 0)
df$any_fatigue <- !is.na(df$first_fatigue)
summary(glm(any_fatigue ~ impulse_cumsum + force_ppn, data = df, family = binomial))
summary(lm(n_fatigue ~ impulse_cumsum + force_ppn, data = df))
# What might change with fatigue?
df$force_ppn <- factor(df$force_ppn, ordered = T)
summary(glm(enough_force ~ impulse_cumsum + force_ppn, data = df, family = binomial))
summary(lm(log(impulse) ~ impulse_cumsum + force_ppn, data = df))
summary(lm(max_force_time ~ impulse_cumsum + force_ppn, data = df))
df$any_fatigue <- !is.na(df$first_fatigue)
summary(glm(any_fatigue ~ impulse_cumsum + force_ppn, data = df, family = binomial))
# What happens when we add reward magnitude?
summary(glm(enough_force ~ impulse_cumsum + force_ppn + rew_mag, data = df, family = binomial))
table(df$rew_type)
# What happens when we add reward magnitude?
summary(glm(enough_force ~ impulse_cumsum + force_ppn + rew_mag, data = df, family = binomial))
summary(lm(log(impulse) ~ impulse_cumsum + force_ppn + rew_mag, data = df))
summary(lm(max_force_time ~ impulse_cumsum + force_ppn + rew_mag, data = df))
summary(glm(any_fatigue ~ impulse_cumsum + force_ppn + rew_mag, data = df, family = binomial))
summary(lm(df$max_trial_force_ppn ~ impulse_cumsum + force_ppn, data = df))
summary(lm(df$max_trial_force_ppn ~ impulse_cumsum + force_ppn + rew_mag, data = df))
summary(lm(df$max_trial_force_ppn ~ impulse_cumsum + force_ppn + rew_mag*rew_type, data = df))
summary(lm(df$max_trial_force_ppn ~ impulse_cumsum + force_ppn + rew_mag, data = df))
summary(glmer(enough_force ~ impulse_cumsum + force_ppn + (1|ID), data = df, family = binomial))
summary(lmer(log(impulse) ~ impulse_cumsum + force_ppn + (1|ID), data = df))
summary(lmer(log(impulse) ~ impulse_cumsum + force_ppn + (1|ID), data = df))
summary(lmer(max_force_time ~ impulse_cumsum + force_ppn + (1|ID), data = df))
summary(glmer(any_fatigue ~ impulse_cumsum + force_ppn + (1|ID), data = df, family = binomial))
summary(lm(df$max_trial_force_ppn ~ impulse_cumsum + force_ppn + (1|ID), data = df))
df$ID
table(df$ID)
summary(lmer(df$max_trial_force_ppn ~ impulse_cumsum + force_ppn + (1|ID), data = df))
# What happens when we add reward magnitude?
summary(glmer(enough_force ~ impulse_cumsum + force_ppn + rew_mag + (1|ID), data = df, family = binomial))
summary(lmer(log(impulse) ~ impulse_cumsum + force_ppn + rew_mag + (1|ID), data = df))
summary(lmer(max_force_time ~ impulse_cumsum + force_ppn + rew_mag + (1|ID), data = df))
summary(glmer(any_fatigue ~ impulse_cumsum + force_ppn + rew_mag + (1|ID), data = df, family = binomial))
summary(lmer(max_trial_force_ppn ~ impulse_cumsum + force_ppn + rew_mag + (1|ID), data = df))
df$trial_duration
hist(df$trial_duration)
summary(lmer(trial_duration ~ impulse_cumsum + force_ppn + rew_mag + (1|ID), data = df))
rm(list = ls())
proj_path <- 'C:/Users/isaac/Projects/sft'
library(tempodisco)
data_path <- file.path(proj_path, 'data', 'raw', 'expt-1')
proj_path <- 'C:/Users/isaac/Projects/sft'
data_path <- file.path(proj_path, 'data', 'raw', 'expt-1')
data_wide <- c() # initialize final data table
all_files <- dir(data_path)
n <- 0
mx <- length(all_files)
last_str <- ''
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
dd$immediate_value
file
dd$delay
as.numeric(gsub(' days', '', dd$delay))
data.frame(
ptpt = file,
imm_val = dd$immediate_value,
del_val = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order
)
library(tempodisco)
proj_path <- 'C:/Users/isaac/Projects/sft'
data_path <- file.path(proj_path, 'data', 'raw', 'expt-1')
dd <- data.frame(
ptpt = file,
imm_val = dd$immediate_value,
del_val = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order
)
tempodisco::adj_amt_indiffs(dd)
dd <- data.frame(
ptpt = file,
val_imm = dd$immediate_value,
val_del = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order
)
# Delay discounting data
dd <- data[!is.na(data$order), ]
dd <- data.frame(
ptpt = file,
val_imm = dd$immediate_value,
val_del = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order
)
tempodisco::adj_amt_indiffs(dd)
plot(tempodisco::adj_amt_indiffs(dd))
# Delay discounting data
dd <- data[!is.na(data$order), ]
dd <- data.frame(
ptpt = file,
val_imm = dd$immediate_value,
val_del = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order,
rt = dd$rt
)
library(tempodisco)
proj_path <- 'C:/Users/isaac/Projects/sft'
data_path <- file.path(proj_path, 'data', 'raw', 'expt-1')
dd_tables <- list()
for (file in all_files) {
data <- read.csv(file.path(data_path, file))
# Delay discounting data
dd <- data[!is.na(data$order), ]
dd <- data.frame(
ptpt = file,
val_imm = dd$immediate_value,
val_del = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order,
rt = dd$rt,
cued = grepl('\\(', dd$delay_text)[blockwise_final_trials] # Parentheses were around cue
)
dd_tables[[length(dd_tables) + 1]] <- dd
}
library(tempodisco)
proj_path <- 'C:/Users/isaac/Projects/sft'
data_path <- file.path(proj_path, 'data', 'raw', 'expt-1')
dd_tables <- list()
for (file in all_files) {
data <- read.csv(file.path(data_path, file))
# Delay discounting data
dd <- data[!is.na(data$order), ]
dd <- data.frame(
ptpt = file,
val_imm = dd$immediate_value,
val_del = dd$delayed_value,
del = as.numeric(gsub(' days', '', dd$delay)),
imm_chosen = dd$button_pressed == dd$order,
rt = dd$rt
)
dd_tables[[length(dd_tables) + 1]] <- dd
}
dd_data <- do.call(rbind, dd_tables)
write.csv(dd_data,
file = file.path(proj_path, 'data', 'dd-expt-1.csv'),
row.names = F)
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
data_wide <- do.call(rbind, data_wide)
dd_data <- do.call(rbind, dd_tables)
write.csv(dd_data,
file = file.path(proj_path, 'data', 'dd-expt-1.csv'),
row.names = F)
write.csv(data_wide,
file = file.path(proj_path, 'data', 'beh-expt-1.csv'),
row.names = F)
write.csv(dd_data,
file = file.path(proj_path, 'data', 'dd-expt-1.csv'),
row.names = F)
write.csv(data_wide,
file = file.path(proj_path, 'data', 'beh-expt-1.csv'),
row.names = F)
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
dd$delay_text
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
grep('.*in 90 days.*', dd$delay_text)
grepl('.*in 90 days.*', dd$delay_text)
grepl('.*in 90 days.*\\(.*\\)', dd$delay_text)
grepl('.*in 90 days.*\\(.*\\).*', dd$delay_text)
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
source("C:/Users/isaac/Projects/sft/code/process-raw-data.R")
proj_path <- 'C:/Users/isaac/Projects/sft'
data_path <- file.path(proj_path, 'data', 'raw', 'expt-1')
dd <- read.csv(file.path(proj_path, 'data', 'dd-expt-1.csv'))
library(tempodisco)
source("C:/Users/isaac/Projects/sft/code/dd.R")
sdf$ptpt
td_ipm(sdf)
adj_amt_indiffs(sdf)
mod <- td_ipm(adj_amt_indiffs(sdf))
mod$data
mod$config
mod$config$discount_function$name
indiff_data <- adj_amt_indiffs(sdf)
mod <- td_ipm(subset(indiff_data, !cued))
mod <- td_ipm(subset(indiff_data, del != 90))
mod$data
mod
indiff_data <- adj_amt_indiffs(sdf)
mod <- td_ipm(subset(indiff_data, del != 90))
formals(fun = td_fn)
formals(fun = td_fn)$predefined
dfs <- c("hyperbolic", "exponential", "inverse-q-exponential", "nonlinear-time-hyperbolic",
"scaled-exponential", "dual-systems-exponential", "nonlinear-time-exponential",
"noise")
mod <- td_ipm(subset(indiff_data, del != 90), discount_function = dfs)
mod
plot(mod)
predict(mod, del = 90)
AUC(mod)
ED50(mod)
indiff_data$indiff[indiff_data$del == 90]
by(dd, dd$ptpt, function(sdf) {
indiff_data <- adj_amt_indiffs(sdf)
dfs <- c("hyperbolic", "exponential", "inverse-q-exponential", "nonlinear-time-hyperbolic",
"scaled-exponential", "dual-systems-exponential", "nonlinear-time-exponential",
"noise")
mod <- td_ipm(subset(indiff_data, del != 90), discount_function = dfs)
data.frame(
auc = AUC(mod),
ed50 = ED50(mod),
disc_func = mod$config$discount_function$name,
pred_90 = predict(mod, del = 90),
actual_90 = indiff_data$indiff[indiff_data$del == 90]
)
}, simplify = F)
source("C:/Users/isaac/Projects/sft/code/dd.R")
do.call(rbind, rows)
df <- do.call(rbind, rows)
table(df$disc_func)
df$ed50
hist(df$ed50)
source("C:/Users/isaac/Projects/sft/code/dd.R")
plot(mod)
nonsys(mod)
source("C:/Users/isaac/Projects/sft/code/dd.R")
nonsys(td_ipm(uncued, discount_function = 'model-free'))
source("C:/Users/isaac/Projects/sft/code/dd.R")
source("C:/Users/isaac/Projects/sft/code/dd.R")
source("C:/Users/isaac/Projects/sft/code/dd.R")
df$jb_crit
source("C:/Users/isaac/Projects/sft/code/dd.R")
table(df$disc_func, df$C1)
table(df$disc_func, df$C2)
?nonsys
table(df$C1, df$C2)
df$effect <- df$actual_90 - df$pred_90
boxplot(df$effect ~ df$C2)
boxplot(df$effect ~ df$disc_func)
hist(df$effect)
hist(df$effect, breaks = 100)
hist(df$effect, breaks = 1000)
hist(subset(df, disc_func != 'noise')$effect, breaks = 1000)
df <- subset(df, disc_func != 'noise')
t.test(df$effect)
odds <- function(p) p / (1 - p)
odds <- function(p) p / (1 - p)
df$effect <- log( odds(df$actual_90) / odds(df$pred_90) )
boxplot(df$effect ~ df$disc_func)
hist(subset(df, disc_func != 'noise')$effect, breaks = 1000)
hist(subset(df, disc_func != 'noise')$effect, breaks = 100)
source("C:/Users/isaac/Projects/sft/code/process-raw-data-expt-2.R")
rm(list = ls())
dev.off()
source("C:/Users/isaac/Projects/sft/code/process-raw-data-expt-2.R")
source("C:/Users/isaac/Projects/sft/code/process-raw-data-expt-2.R")
dd
library(tempodisco)
td_bcnm(dd, discount_function = 'model-free')
source("C:/Users/isaac/Projects/sft/code/process-raw-data-expt-2.R")
td_bcnm(dd, discount_function = 'model-free')
mod <- td_bcnm(dd, discount_function = 'model-free')
plot(mod)
mod <- td_bcnm(dd, discount_function = 'all')
plot(mod)
plot(mod, type = 'endpoints')
mod <- td_bcnm(dd, discount_function = 'all', fixed_ends = T)
plot(mod, type = 'endpoints')
source("C:/Users/isaac/Projects/sft/code/process-raw-data-expt-2.R")
source("C:/Users/isaac/Projects/sft/code/process-raw-data-expt-2.R")
library(tempodisco)
proj_path <- 'C:/Users/isaac/Projects/sft'
dd <- read.csv(file.path(proj_path, 'data', 'dd-expt-1.csv'))
rows <- by(dd, dd$ptpt, function(sdf) {
indiff_data <- adj_amt_indiffs(sdf)
uncued <- subset(indiff_data, del != 90)
dfs <- c("hyperbolic", "exponential", "inverse-q-exponential", "nonlinear-time-hyperbolic",
"scaled-exponential", "dual-systems-exponential", "nonlinear-time-exponential",
"noise")
mod <- td_ipm(uncued, discount_function = dfs)
if (mod$config$discount_function$name == 'noise') {
plot(mod)
points(90, indiff_data$indiff[indiff_data$del == 90])
}
jb_crit <- nonsys(td_ipm(uncued, discount_function = 'model-free'))
data.frame(
auc = AUC(mod, verbose = F),
ed50 = ED50(mod),
disc_func = mod$config$discount_function$name,
pred_90 = predict(mod, del = 90),
actual_90 = indiff_data$indiff[indiff_data$del == 90],
C1 = jb_crit['C1'],
C2 = jb_crit['C2']
)
}, simplify = F)
df <- do.call(rbind, rows)
df$effect_subtraction <- df$actual_90 - df$pred_90
df$effect_subtraction
dd <- read.csv(file.path(proj_path, 'data', 'dd-expt-2.csv'))
setwd('..')
setwd('sft')
library(tempodisco)
proj_path <- 'C:/Users/isaac/Projects/sft'
dd <- read.csv(file.path(proj_path, 'data', 'dd-expt-2.csv'))
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
sdf
sdf$cued
uncued <- subset(sdf, del != 90)
dfs <- c("hyperbolic", "exponential", "inverse-q-exponential", "nonlinear-time-hyperbolic",
"scaled-exponential", "dual-systems-exponential", "nonlinear-time-exponential",
"noise")
mod <- td_ipm(uncued, discount_function = dfs)
mod <- td_bcnm(uncued, discount_function = dfs)
sdf <- subset(sdf, val_imm != val_del & val_imm != 0)
uncued <- subset(sdf, del != 90)
dfs <- c("hyperbolic", "exponential", "inverse-q-exponential", "nonlinear-time-hyperbolic",
"scaled-exponential", "dual-systems-exponential", "nonlinear-time-exponential",
"noise")
mod <- td_bcnm(uncued, discount_function = dfs, fixed_ends = T)
plot(mod)
plot(mod, type = 'scores')
plot(mod, type = 'link')
disc_func_names <- c("hyperbolic", "exponential", "inverse-q-exponential", "nonlinear-time-hyperbolic",
"scaled-exponential", "dual-systems-exponential", "nonlinear-time-exponential",
"noise")
for (disc_func_name in disc_func_names) {
td_fn(predefined = disc_func_name)
}
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
disc_func <- td_fn(predefined = disc_func_name)
disc_func$fn
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
disc_funcs[[1]]
disc_funcs[[2]]
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
disc_func
disc_func$par_starts
disc_func$par_lims
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
disc_func
mod <- td_bcnm(uncued, discount_function = disc_funcs, fixed_ends = T)
mod <- td_bcnm(uncued, discount_function = disc_funcs[[1]], fixed_ends = T)
View(td_bcnm)
mod
is.list(mod)
list(mod)
devtools::load_all('C:/Users/isaac/Projects/tempodisco')
devtools::load_all('C:/Users/isaac/Projects/tempodisco')
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
source("C:/Users/isaac/Projects/sft/code/process-dd-expt-2.R")
devtools::install_github('kinleyid/tempodisco')
