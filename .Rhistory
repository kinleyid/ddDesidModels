hist(df$ppn_core)
t.test(df$ppn_core ~ df$type)
boxplot(df$ppn_core ~ df$type)
plot(df$ppn_core ~ df$core_clust)
plot(df$ppn_core ~ df$topic_0_mean_relatedness)
t.test(df$core_trans ~ df$type)
t.test(df$core_clust ~ df$type)
boxplot(df$core_trans ~ df$type)
plot(df$topic_0_mean_relatedness ~ df$core_trans)
t.test(df$topic_0_mean_relatedness ~ df$type)
t.test(df$topic_1_mean_relatedness ~ df$type)
t.test(df$topic_2_mean_relatedness ~ df$type)
t.test(df$topic_3_mean_relatedness ~ df$type)
t.test(df$topic_4_mean_relatedness ~ df$type)
t.test(df$topic_5_mean_relatedness ~ df$type)
t.test(df$topic_6_mean_relatedness ~ df$type)
data_path <- file.path(proj_path, 'metrics', 'core-metrics-prolific-2.csv')
df <- read.csv(data_path)
t.test(df$mean_interrelation ~ df$type)
hist(df$ppn_core)
t.test(df$ppn_core ~ df$type)
t.test(df$core_trans ~ df$type)
t.test(df$core_clust ~ df$type)
boxplot(df$core_trans ~ df$type)
t.test(df$topic_0_mean_relatedness ~ df$type)
data_path <- file.path(proj_path, 'metrics', 'core-metrics-cogflex.csv')
df <- read.csv(data_path)
data_path <- file.path(proj_path, 'metrics', 'core-metrics-cogflex.csv')
df <- read.csv(data_path)
t.test(df$mean_interrelation ~ df$type)
library(afex)
proj_path <- 'C:/Users/isaac/Projects/schemas'
library(afex)
proj_path <- 'C:/Users/isaac/Projects/schemas'
data_path <- file.path(proj_path, 'metrics', 'twin-metrics-cogflex.csv')
df <- read.csv(data_path)
df$mean_schematicity
t.test(df$mean_schematicity ~ df$Condition)
t.test(df$topic_similarity ~ df$Condition)
df$topic_similarity
data_path <- file.path(proj_path, 'metrics', 'twin-metrics-cogflex.csv')
df <- read.csv(data_path)
t.test(df$mean_schematicity ~ df$Condition)
t.test(df$topic_similarity ~ df$Condition)
library(roxygen2);
roxygenise();
roxygenise();
library(ddDesidModels)
?predict_indiff
roxygenise();
library(ddDesidModels)
?predict_indiff
df <- data.frame(val_imm = runif(10), val_del = 1, del = exp(1:10), imm_chosen = c(T, F)) # random choices
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
ddDesidModels::predict_indiff
roxygenise();
roxygenise();
?predict_indiffs
df <- data.frame(val_imm = runif(10), val_del = 1, del = exp(1:10), imm_chosen = c(T, F)) # random choices
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del)
df
mod
mod$data$del
indiffs
library(ddDesidModels)
roxygenise();
df <- data.frame(val_imm = runif(10), val_del = 1, del = exp(1:10), imm_chosen = c(T, F)) # random choices
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del)
df <- data.frame(val_imm = runif(10), val_del = 1, del = exp(1:10), imm_chosen = c(T, F)) # random choices
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del)
mod$prob_model()
mod$prob_model
logistic
ddDesidModels::logistic
?predict_prob_imm
df <- data.frame(val_imm = runif(10), val_del = 1, del = exp(1:10), imm_chosen = c(T, F)) # random choices
mod <- dd_prob_model(df)
prob_imm <- predict_prob_imm(mod)
boxplot(prob_imm ~ mod$data$imm_chosen)
prob_imm
logistic <- function(x) 1 / (1 + exp(-x))
logistic(-10:10)
plot(logistic(-10:10))
seq(1:10, each=10)
seq(1:10)
rep(exp(1:10), each=10)
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.01*df$del)))
prob
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
mod
prob_imm <- predict_prob_imm(mod)
boxplot(prob_imm ~ mod$data$imm_chosen)
plot(prob_imm ~ prob)
exp(mod$par$k)
exp(mod$par)
?dd_prob_model
mod$discount_function_name
print(mod$discount_function_name)
print(mod$par)
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.01*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del)
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.01*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del, type = 'l')
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del, type = 'l')
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ log(mod$data$del), type = 'l')
grepl('k|s', 'k')
grepl('k|s', c('k', 's', 'ks', 'g'))
grepl('k|s', c('k', 's', 'ks', 'gamma'))
library(ddDesidModels)
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del, type = 'l')
mod$par
mod$untransformed_parameters
ddDesidModels::dd_prob_model
best_output$untransformed_parameters <- u_p
source("C:/Users/isaac/Projects/dd_fitting_package/R/nonlinear-model-fitting.R")
ddDesidModels::dd_prob_model
library(devtools)
load_all(',')
load_all('.')
rm(list = ls())
load_all('.')
ddDesidModels::dd_prob_model()
ddDesidModels::dd_prob_model
stop
stop()
stop('hey')
help(ddDesidModels::dd_prob_model)
sprintf('\n%s', 1:3)
stop(sprintf('\n%s', 1:3))
load_all(',')
load_all('.')
ddDesidModels::dd_prob_model()
ddDesidModels::dd_prob_model(1:10)
ddDesidModels::dd_prob_model(1:10, discount_function = 'xyz')
load_all('.')
ddDesidModels::dd_prob_model(1:10, discount_function = 'xyz')
load_all('.')
ddDesidModels::dd_prob_model(1:10, discount_function = 'xyz')
sprintf('\n- "%s"', names(all_discount_functions)
)
load_all('.')
ddDesidModels::dd_prob_model(1:10, discount_function = 'xyz')
load_all('.')
load_all('.')
help(ddDesidModels::dd_prob_model)
roxygenize()
load_all('.')
help(ddDesidModels::dd_prob_model)
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
print(mod$discount_function_name)
mod$par
mod$untransformed_parameters
load_all('.')
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10)) # random choices
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
mod <- dd_prob_model(df)
print(mod$discount_function_name)
?optim
usethis::use_citation()
load_all('.')
citation("ddDesidModels")
citation(ddDesidModels)
ddDesidModels
ddDesidModels::dd_prob_model
require(devtools)
install_github("kinleyid/ddDesidModels");
rm(list = ls())
require(devtools)
install_github("kinleyid/ddDesidModels");
library(roxygen2)
roxygenize()
library(ddDesidModels)
?ddDesidModels::predict_indiffs
0:100
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del))) # hyperbolic discounting
prob <- logistic(logit(df$val_imm / df$val_del) - logit(exp(-0.001*del$del))) # hyperbolic discounting
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del))) # hyperbolic discounting
prob <- logistic(logit(df$val_imm / df$val_del) - logit(exp(-0.001*df$del))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
delays <- 0:100
indiffs <- predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
delays <- exp(0:10)
indiffs <- predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
delays <- exp(seq(0, 5, length.out = 100))
indiffs <- predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
delays <- exp(seq(0, 8, length.out = 100))
indiffs <- predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
ddDesidModels::predict_prob_imm(mod, data = df)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm)
df <- data.frame(val_imm = 0:100, val_del = 100, del = 1000)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm)
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm)
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(0.5*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(0.5*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
df
df <- data.frame(val_imm = seq(1, 99, length.out = 20), val_del = 100, del = rep(exp(1:10), each=20))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(0.5*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
df <- data.frame(val_imm = seq(1, 99, length.out = 20), val_del = 100, del = rep(exp(1:10), each=20))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(2*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm <- seq(0, 1, length.out = 101))
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm <- seq(0, 1, length.out = 101))
df <- data.frame(val_imm = 0:100, val_del = 100, del = 10)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm <- seq(0, 1, length.out = 101))
df <- data.frame(val_imm = seq(1, 99, length.out = 20), val_del = 100, del = rep(exp(1:10), each=20))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(2*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm <- seq(0, 1, length.out = 101))
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101))
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
df <- data.frame(val_imm = seq(1, 99, length.out = 20), val_del = 100, del = rep(exp(1:10), each=20))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(0.8*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
dev.off()
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 1000)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 2000)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
dev.off()
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = 500)
df
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
df
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
gamma <- 5
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
# Generate data
for (gamma in c(5, 0.5)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
gamma <- 5
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm)
}
dev.off()
# Generate data
for (gamma in c(5, 0.5)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm)
}
# Generate data
for (gamma in c(5, 0.1)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm, type = 'l')
}
# Generate data
for (gamma in c(5, 0.1)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
plot(prob ~ df$val_imm)
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm, type = 'l')
}
# Generate data
for (gamma in c(5, 0.1)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
plot(prob ~ df$val_imm, type = 'l')
for (dplus in c(T, F)) {
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df, dplus = dplus)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm, type = 'l')
}
}
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(prob)
