# Fit model
mod <- dd_prob_model(df)
# Fit model
mod <- dd_prob_model(df)
optimized <- optim(
fn = nll_fn,
par = param_vals[val_idx, ]
)
optimize
optimized
best_optimized
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
# Fit model
mod <- dd_prob_model(df)
best_output
best_output$discount_function()
best_output$discount_function_name
best_output$ED50 <- switch(
best_ouput$discount_function_name,
"mazur"= 1/up$k,
"samuelson"= log(2)/up$k,
"myerson-green" = (2^(1/up$s) - 1) / up$k,
"rachlin" = (1/up$k) ^ (1/up$s),
"ebert-prelec" = (log(2)/up$k)^(1/up$s),
"laibson" = log(2*up$w)/up$k,
"bos-mcclure" = NA
)
best_output
best_output$discount_function_name
switch(
best_ouput$discount_function_name,
"mazur"= 1/up$k,
"samuelson"= log(2)/up$k,
"myerson-green" = (2^(1/up$s) - 1) / up$k,
"rachlin" = (1/up$k) ^ (1/up$s),
"ebert-prelec" = (log(2)/up$k)^(1/up$s),
"laibson" = log(2*up$w)/up$k,
"bos-mcclure" = NA
)
best_output$ED50 <- switch(
best_output$discount_function_name,
"mazur"= 1/up$k,
"samuelson"= log(2)/up$k,
"myerson-green" = (2^(1/up$s) - 1) / up$k,
"rachlin" = (1/up$k) ^ (1/up$s),
"ebert-prelec" = (log(2)/up$k)^(1/up$s),
"laibson" = log(2*up$w)/up$k,
"bos-mcclure" = NA
)
devtools::load_all(".")
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
mod
# Fit model
mod <- dd_prob_model(df)
best_output$discount_function_name
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
mod$ED50
names(mod$ED50)
names(mod$ED50) <- c()
mod$ED50
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
x <- ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
names(data)
names(df)
paste(names(df), collapse = ', ')
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
devtools::load_all(".")
x <- ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
df$imm_chosen <- runif(nrow(df)) < prob
x <- ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
x$ED50
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperb')
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
indiffs <- predict_indiffs(mod)
plot(indiffs ~ log(mod$data$del), type = 'l')
plot(indiffs ~ log(mod$data$del), type = 'l')
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del, type = 'l')
mod$ED50
predict_indiffs(mod, del = mod$ED50)
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
mod$ED50
mod$ED50
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
mod$ED50
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperboic')
devtools::load_all(".")
debugSource("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
plot(mod_indiffs ~ dels, type = 'l')
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels)
indiffs <- function(x) 1 / (1 + 0.001*x)
lines(indiffs(dels) ~ dels)
dev.off()
lines(indiffs(dels) ~ dels, col = 'red')
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels, col = 'red')
print(predict_indiffs(mod, del = mod$ED50))
mod$ED50
mod$ED50
print(predict_indiffs(mod, del = c(1,2,3)))
print(predict_indiffs(mod, del = mod$ED50)
)
predict_indiffs(mod, del = mod$ED50)
indiffs
dek
del
predict_indiffs(mod, del = 100)
indiffs
devtools::load_all(".")
predict_indiffs(mod, del = 100)
indiffs
devtools::load_all(".")
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels, col = 'red')
print(predict_indiffs(mod, del = mod$ED50))
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
# Fit models
for (curr_discount_function in all_discount_functions) {
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels, col = 'red')
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
}
devtools::load_all(".")
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
plot(mod_indiffs ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs(dels) ~ dels, col = 'red')
dev.off()
# Fit models
for (curr_discount_function in all_discount_functions) {
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs(dels) ~ dels, col = 'red')
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
}
devtools::load_all(".")
curr_discount_function <- 'dual-systems-exponential'
mod <- dd_prob_model(df, discount_function = curr_discount_function)
dd_prob_model(df, discount_function = curr_discount_function)
dd_prob_model(df, discount_function = curr_discount_function)
devtools::load_all(".")
dd_prob_model(df, discount_function = curr_discount_function)
cand <- 1
mod$discount_function(cand, mod$par)
# No analytic solution, therefore search iteratively
cand <- 1
# No analytic solution, therefore search iteratively
cand <- 1
while(mod$discount_function(cand, mod$par) > 0.5) {
cand <- cand*2
}
cand
cand
mod$discount_function(cand, mod$par)
mod$discount_function(cand/2, mod$par)
# No analytic solution, therefore search iteratively
optim_func <- function(cand) {
(mod$discount_function(cand, mod$par) - 0.5)**2
}
optim_func
optim(optim_func, 1)
# No analytic solution, therefore search iteratively
optim_func <- function(cand) {
(mod$discount_function(cand, mod$par) - 0.5)**2
}
optim(fn = optim_func, par = 1)
optim(fn = optim_func, par = 1, method = 'Brent')
optim(fn = optim_func, par = 1, method = 'BFGS')
devtools::load_all(".")
devtools::load_all(".")
dev.off()
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
curr_discount_function <- "nonlinear-time-exponential"
mod <- dd_prob_model(df, discount_function = curr_discount_function)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# Test each discount function
all_discount_functions <- c(
"hyperbolic",
"exponential",
"inverse-q-exponential",
"nonlinear-time-hyperbolic",
"scaled-exponential",
"dual-systems-exponential",
"nonlinear-time-exponential"
)
# Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
indiffs <- function(x) 1 / (1 + 0.001*x)
prob <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs(df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
curr_discount_function <- "nonlinear-time-exponential"
mod <- dd_prob_model(df, discount_function = curr_discount_function)
curr_discount_function <- "dual-systems-exponential"
mod <- dd_prob_model(df, discount_function = curr_discount_function)
optimized
mod$discount_function(cand, optimized$par)
mod$discount_function(optimized$par, mod$par)
mod$discount_function(optimized$par, mod$par)
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
mod$ED50
mod$discount_function(mod$ED50, mod$untransformed_parameters)
mod$discount_function(mod$ED50, mod$par)
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
devtools::load_all(".")
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
devtools::load_all(".")
curr_discount_function <- "dual-systems-exponential"
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
# No analytic solution, therefore search iteratively
optim_func <- function(cand) {
(predict_indiffs(best_output, cand) - 0.5)**2
}
optimized <- optim(fn = optim_func, par = 1, method = 'BFGS')
best_output$ED50 <- optimized$par
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs(dels) ~ dels, col = 'red')
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
curr_discount_function <- "dual-systems-exponential"
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
1e-20
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
1e-20
devtools::load_all(".")
devtools::load_all(".")
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs(df$del)))
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_1 <- function(x) exp(-0.01*x)
plot(indiffs_1(df$del) ~ df$del)
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_2 <- function(x) exp(-0.001*x)
plot(indiffs_1(df$del) ~ df$del, type = 'l')
lines(indiffs_2(df$del) ~ df$del, col = 'red')
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_2 <- function(x) exp(-0.001*x)
plot(indiffs_1(df$del) ~ df$del, type = 'l', ylim = c(0, 1))
lines(indiffs_2(df$del) ~ df$del, col = 'red')
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_2 <- function(x) exp(-0.00001*x)
plot(indiffs_1(df$del) ~ df$del, type = 'l', ylim = c(0, 1))
lines(indiffs_2(df$del) ~ df$del, col = 'red')
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_2 <- function(x) exp(-0.0001*x)
plot(indiffs_1(df$del) ~ df$del, type = 'l', ylim = c(0, 1))
lines(indiffs_2(df$del) ~ df$del, col = 'red')
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
dels <- seq(0, max(df$del), length.out = 1000)
plot(indiffs_1(dels) ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs_2(dels) ~ dels, col = 'red')
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
df_2 <- df
df_2$imm_chosen <- runif(nrow(df)) < prob_2
mod_1 <- ddDesidModels::dd_prob_model(df_1)
mod_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
mod_1$ED50
lines(c(mod_1$ED50, mod_1$ED50) ~ c(0, 1))
lines(c(0, 1) ~ c(mod_1$ED50, mod_1$ED50))
mod_1 <- ddDesidModels::dd_prob_model(df_1)
plot(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels, type = 'l', ylim = c(0, 1))
lines(c(0, 1) ~ rep(mod_1$ED50, 2))
# Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
dels <- seq(0, max(df$del), length.out = 1000)
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
# Indifference points for 2 different discounters
indiffs_1 <- function(x) 1 / (1 + 0.0001*x)
indiffs_2 <- function(x) exp(-0.0001*x)
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
plot(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels, type = 'l', ylim = c(0, 1))
lines(c(0, 1) ~ rep(mod_1$ED50, 2))
abline(h = 0.5)
abline(h = 0.5, col = 'gray')
# Indifference points for 2 different discounters
indiffs_1 <- function(x) 1 / (1 + 0.0005*x)
indiffs_2 <- function(x) exp(-0.0005*x)
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
plot(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels, type = 'l', ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
lines(c(0, 1) ~ rep(mod_1$ED50, 2))
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.5
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
plot(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels, type = 'l', ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
lines(c(0, 1) ~ rep(mod_1$ED50, 2))
df_2 <- df
df_2$imm_chosen <- runif(nrow(df)) < prob_2
mod_2 <- ddDesidModels::dd_prob_model(df_2)
mod_2$discount_function_name
mod_2 <- ddDesidModels::dd_prob_model(df_2, discount_function = 'inverse-q-exponential')
plot(ddDesidModels::predict_indiffs(mod_2, dels) ~ dels, type = 'l', ylim = c(0, 1))
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.1
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_2 <- df
df_2$imm_chosen <- runif(nrow(df)) < prob_2
mod_2 <- ddDesidModels::dd_prob_model(df_2, discount_function = 'inverse-q-exponential')
plot(ddDesidModels::predict_indiffs(mod_2, dels) ~ dels, type = 'l', ylim = c(0, 1))
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.5
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.2
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.2
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**1.5
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.2
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**1.5
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**1.1
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / exp(0.0005*x**0.1)
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / exp(0.0005*x**0.9)
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / exp(0.0005*x**1.1)
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / exp(0.0005*x**0.5)
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / exp(0.0005*x**0.7)
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / exp(0.0005*x**0.9)
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.0005*x)**0.8
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.05*x)**0.8
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.05*x)**0.1
plot(indiffs_2(dels) ~ dels)
indiffs_2 <- function(x) 1 / (1 + 0.05*x)**0.5
plot(indiffs_2(dels) ~ dels)
plot(indiffs_2(seq(0, 10, length.out = 100)) ~ seq(0, 10, length.out = 100))
# Indifference points for 2 different discounters
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_2 <- function(x) exp(-0.001*x)
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
plot(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels, type = 'l', ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
plot(NA)
plot(NA ~ NA)
plot()
plot(ylim = c(0, 1))
plot.new(ylim = c(0, 1))
plot.new()
plot.new()
plot.window(xlim = c(0, max(df$del)), ylim = c(0, 1))
lines(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels)
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(0, max(df$del)),
ylim = c(0, 1))
plot(1, type = "n", xlab = "delay",
ylab = "indifference", xlim = c(0, max(df$del)),
ylim = c(0, 1))
lines(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels)
plot(1, type = "n", xlab = "delay",
ylab = "indifference", xlim = c(0, max(df$del)),
ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
plot(1, type = "n", xlab = "delay", ylab = "indifference",
xlim = c(0, max(df$del)), ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
lines(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels)
abline(v = mod_1$ED50)
lines(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels, col = 'red')
lines(ddDesidModels::predict_indiffs(mod_2, dels) ~ dels, col = 'red')
# Indifference points for 2 different discounters
indiffs_1 <- function(x) 1 / (1 + 0.001*x)
indiffs_2 <- function(x) exp(-0.001*x)
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
df_2 <- df
df_2$imm_chosen <- runif(nrow(df)) < prob_2
mod_2 <- ddDesidModels::dd_prob_model(df_2, discount_function = 'inverse-q-exponential')
plot(1, type = "n", xlab = "delay", ylab = "indifference",
xlim = c(0, max(df$del)), ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
lines(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels)
abline(v = mod_1$ED50)
lines(ddDesidModels::predict_indiffs(mod_2, dels) ~ dels, col = 'red')
abline(v = mod_1$ED50)
abline(v = mod_2$ED50, col = 'red')
# Indifference points for 2 different discounters
indiffs_1 <- function(x) 1 / (1 + 0.0005*x)
indiffs_2 <- function(x) exp(-0.0001*x)
prob_1 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_1(df$del)))
prob_2 <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs_2(df$del)))
df_1 <- df
df_1$imm_chosen <- runif(nrow(df)) < prob_1
mod_1 <- ddDesidModels::dd_prob_model(df_1)
df_2 <- df
df_2$imm_chosen <- runif(nrow(df)) < prob_2
mod_2 <- ddDesidModels::dd_prob_model(df_2, discount_function = 'inverse-q-exponential')
plot(1, type = "n", xlab = "delay", ylab = "indifference",
xlim = c(0, max(df$del)), ylim = c(0, 1))
abline(h = 0.5, col = 'gray')
lines(ddDesidModels::predict_indiffs(mod_1, dels) ~ dels)
abline(v = mod_1$ED50)
lines(ddDesidModels::predict_indiffs(mod_2, dels) ~ dels, col = 'red')
abline(v = mod_2$ED50, col = 'red')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
