mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'exponential', choice_rule = 'probit')
# Power choice rule:
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'exponential', choice_rule = 'power')
mod <- td_bcnm(df, discount_function = 'exponential', fixed_ends = T)
plot(mod, type = 'endpoints', verbose = F)
devtools::build_vignettes()
View(td_bclm)
View(td_bcnm())
View(td_bcnm)
?glm
na.omit
View(td_ipm)
devtools::test()
?linearizeMlist
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::build_vignettes()
data("td_bc_study")
data("td_bc_study")
# Check for nonsystematic discounting
by(td_bc_study, td_bc_study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
})
data("td_bc_study")
# Check for nonsystematic discounting
by(td_bc_study, td_bc_study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
})
data("td_bc_study")
# For the sake of speed, only look at the first 20 participants
ids <- unique(td_bc_study$id)[1:20]
study <- subset(td_bc_study, id %in% ids)
# Check for nonsystematic discounting
by(study, study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
})
# Check for nonsystematic discounting
by(study, study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
}, simplify = F)
# Check for nonsystematic discounting
nonsys <- by(study, study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
}, simplify = F)
nonsys
do.call(rbind, nonsys)
rm(list = 'nonsys')
nonsys
data("td_bc_study")
# For the sake of speed, only look at the first 20 participants
ids <- unique(td_bc_study$id)[1:20]
study <- subset(td_bc_study, id %in% ids)
# Check for nonsystematic discounting
is_nonsys <- by(study, study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
}, simplify = T)
is_nonsys
data <- data[!is_nonsys, ]
# Check for nonsystematic discounting
is_nonsys <- by(study, study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
}, simplify = T)
study <- study[!is_nonsys, ]
study <- study[!is_nonsys, ]
# Quantify discounting
k_vals <- by(study, study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = 'hyperbolic')
coef(mod)['k']
}, simplify = T)
k
k_vals
length(k)
length(k_vals)
data("td_bc_study")
# For the sake of speed, only look at the first 20 participants
ids <- unique(td_bc_study$id)[1:20]
study <- subset(td_bc_study, id %in% ids)
# Check for nonsystematic discounting
is_nonsys <- by(study, study$id, function(ptpt) {
cat('.')
mod <- td_bcnm(ptpt, discount_function = 'model-free')
any(nonsys(mod))
}, simplify = T)
study <- study[!is_nonsys, ]
study
is_nonsys
!is_nonsys
as.data.frame(is_nonsys)
keep_ids <- rownames(is_nonsys)[!is_nonsys]
keep_ids
study <- subset(study, id %in% keep_ids)
# Quantify discounting
k_vals <- by(study, study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = 'hyperbolic')
coef(mod)['k']
}, simplify = T)
k_vals
hist(k_vals)
hist(log(k_vals))
# Quantify Kirby scoring to nonlinear modeling
k_vals <- by(study, study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = 'hyperbolic')
k_nm <- coef(mod)['k']
mod <- kirby_score(study)
k_kirby <- coef(mod)['k']
data.frame(
k_nm = k_nm,
k_kirby = k_kirby
)
}, simplify = T)
# Quantify Kirby scoring to nonlinear modeling
k_vals <- by(study, study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = 'hyperbolic')
k_nm <- coef(mod)['k']
mod <- kirby_score(study)
k_kirby <- coef(mod)['k']
data.frame(
k_nm = k_nm,
k_kirby = k_kirby
)
}, simplify = F)
do.call(rbind, k_vals)
df <- do.call(rbind, k_vals)
plot(df$k_nm ~ df$k_kirby)
# Quantify Kirby scoring to nonlinear modeling
k_vals <- by(study, study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = 'hyperbolic')
k_nm <- coef(mod)['k']
mod <- kirby_score(ptpt)
k_kirby <- coef(mod)['k']
data.frame(
k_nm = k_nm,
k_kirby = k_kirby
)
}, simplify = F)
df <- do.call(rbind, k_vals)
df
plot(df$k_nm ~ df$k_kirby)
plot(log(df$k_nm) ~ log(df$k_kirby))
cor.test(log(df$k_nm), log(df$k_kirby))
# Compare rates of exponential vs hyperbolic discounting
best_mods <- by(study, study$id, function(ptpt) {
mod <- td_bcnm(ptpt, discount_function = c('hyperbolic', 'exponential'))
mod$config$discount_function$name
}, simplify = T)
best_mods
table(best_mods)
table(best_mods)
View(nonsys)
View(attention_checks)
mod
summary(mod)
usethis::use_vignette('analyzing-study')
library(tempodisco)
# Compare Kirby scoring to nonlinear modeling
k_vals <- by(study, study$id, function(ptpt) { # Stratify by participant ID
# Get k from Kirby MCQ scoring
mod <- kirby_score(ptpt)
k_kirby <- coef(mod)['k']
# Get k from nonlinear model fitting
mod <- td_bcnm(ptpt, discount_function = 'hyperbolic')
k_nm <- coef(mod)['k']
# Return a one-row dataframe containing both
data.frame(
k_nm = k_nm,
k_kirby = k_kirby
)
}, simplify = F)
# Stack all the rows to produce a single dataframe
df <- do.call(rbind, k_vals)
cor.test(log(df$k_nm), log(df$k_kirby))
mod <- td_bcnm(ptpt, discount_function = c('hyperbolic',
'exponential',
'nonlinear-time-hyperbolic',
'inverse-q-exponential'))
rows <- by(study, study$id, function(ptpt) { # Stratify by participant ID
mod <- td_bcnm(ptpt, discount_function = c('hyperbolic',
'exponential',
'nonlinear-time-hyperbolic',
'inverse-q-exponential'))
# Return a one-row dataframe containing model-agnostic measures of discounting
data.frame(
AUC = AUC(mod, verbose = F),
ED50 = ED50(mod)
)
}, simplify = F)
rows
do.call(rbind, rows)
do.call(rbind, rows)
df <- do.call(rbind, rows)
cor.test(df$AUC, df$ED50)
plot(df$AUC, df$ED50)
hist(df$ED50)
hist(log(df$ED50))
plot(df$AUC, log(df$ED50))
cor.test(df$AUC, log(df$ED50))
rows <- by(study, study$id, function(ptpt) { # Stratify by participant ID
# Test several discount functions and use the best-fitting one
mod <- td_bcnm(ptpt, discount_function = c('hyperbolic', 'exponential'))
# Return a one-row dataframe containing model-agnostic measures of discounting
data.frame(
id = ptpt$id[1],
AUC = AUC(mod, verbose = F),
ED50 = ED50(mod)
)
}, simplify = F)
discount_measures <- do.call(rbind, rows)
cor.test(df$AUC, log(df$ED50))
by
devtools::build_vignettes()
devtools::build_vignettes()
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) (1 - p['k']/(data$val_del^p['a'])*data$del^s)^(1/p['a']),
par_lims = list(a = c(0, Inf)),
par_starts = list(a = 1, k = 0.001, s = 1))
add_utl
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) (1 - p['k']/(data$val_del^p['a'])*data$del^s)^(1/p['a']),
par_lims = list(a = c(0, Inf)),
par_starts = list(a = 1, k = 0.001, s = 0.1))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del)),
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
nid
mod
View(ED50)
devtools::load_all()
mod
out
val_del
plot(mod)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) {
browser()
data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del))
},
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
c
c
c
c
asfd <- F
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) {
if (asdf) {
browser()
}
data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del))
},
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del)),
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del)),
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del)),
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) {
data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del))
},
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
asdf <- F
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) {
if (asdf) {
browser()
}
data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del))
},
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
asdf <- T
mod
p
data$val_del
data$del
data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del))
View(ED50())
devtools::load_all()
mod
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) {
data$val_del^p['a'] / (1 + p['k']) ** (p['k']*log(data$del))
},
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
mod
mod
devtools::load_all()
mod
plot(mod)
mod
predict(mod)
predict(mod, type = 'response')
predict(mod, type = 'indiff')
add_utl <- td_fn(name = 'additive-utility',
fn = function(data, p) {
data$val_del^(p['a'] - 1) / (1 + p['k']) ** (p['k']*log(data$del))
},
par_lims = list(a = c(0, Inf),
k = c(0, Inf)),
par_starts = list(a = 1, k = 0.001))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = add_utl)
mod
plot(mod)
plot(mod, log = 'x')
plot(mod, log = 'x', val_del = 100)
plot(mod, log = 'x', val_del = 1)
AIC(mod)
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'exponential')
AIC(mod)
View(td_bcnm)
dev.off()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tempodisco)
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'hyperbolic')
plot(mod, type = 'summary')
plot(mod, type = 'summary', verbose = F, log = 'x')
data("td_ip_simulated_ptpt")
mod_ip <- td_ipm(td_ip_simulated_ptpt, discount_function = 'hyperbolic')
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
mod_ip <- kirby_score(td_bc_single_ptpt)
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
plot(mod, type = 'endpoints')
del <- sort(unique(mod$data$del))[2]
plot(mod, type = 'endpoints', del = del, val_del = 1000)
plot(mod, type = 'link')
.Last.error
$stdout
`$stdout`
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tempodisco)
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'hyperbolic')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tempodisco)
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'hyperbolic')
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tempodisco)
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'hyperbolic')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tempodisco)
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'hyperbolic')
plot(mod, type = 'summary')
plot(mod, type = 'summary', verbose = F, log = 'x')
data("td_ip_simulated_ptpt")
mod_ip <- td_ipm(td_ip_simulated_ptpt, discount_function = 'hyperbolic')
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
mod_ip <- kirby_score(td_bc_single_ptpt)
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
plot(mod, type = 'endpoints')
del <- sort(unique(mod$data$del))[2]
plot(mod, type = 'endpoints', del = del, val_del = 1000)
plot(mod, type = 'link')
devtools::build_vignettes()
data("td_ip_simulated_ptpt")
mod_ip <- td_ipm(td_ip_simulated_ptpt, discount_function = 'hyperbolic')
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tempodisco)
data("td_bc_single_ptpt")
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'hyperbolic')
plot(mod, type = 'summary')
plot(mod, type = 'summary', verbose = F, log = 'x')
data("td_ip_simulated_ptpt")
mod_ip <- td_ipm(td_ip_simulated_ptpt, discount_function = 'hyperbolic')
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
mod_ip <- kirby_score(td_bc_single_ptpt)
plot(mod_ip, type = 'summary', log = 'x', verbose = F)
plot(mod, type = 'endpoints')
del <- sort(unique(mod$data$del))[2]
plot(mod, type = 'endpoints', del = del, val_del = 1000)
plot(mod, type = 'link')
devtools::check()
devtools::build_vignettes()
proj_path <- 'C:/Users/isaac/Projects/schemas/'
setwd(proj_path)
list.files(metrics_path, 'metrics-*-hippocorpus.csv')
proj_path <- 'C:/Users/isaac/Projects/schemas/'
metrics_path <- file.path(proj_path, 'metrics')
list.files(metrics_path, 'metrics-*-hippocorpus.csv')
list.files(metrics_path, 'metrics-.*-hippocorpus.csv')
sapply(metrics_files, read.csv)
metrics_files <- list.files(path = metrics_path,
pattern = 'metrics-.*-hippocorpus.csv',
full.names = T)
sapply(metrics_files, read.csv, simplify = F)
metrics_tables <- sapply(metrics_files, read.csv, simplify = F)
metrics_tables$`C:/Users/isaac/Projects/schemas//metrics/metrics-swow-hippocorpus.csv`$X
usethis::use_readme_rmd()
setwd('C:/Users/isaac/Projects/tempodisco')
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_vignettes()
data("adj_amt_sim")
mod <- td_ipm(data = indiff_data, discount_function = 'all')
data("adj_amt_sim") # Load simulated data from an adjusting amounts procedure
indiff_data <- adj_amt_indiffs(adj_amt_sim)
head(indiff_data)
mod <- td_ipm(data = indiff_data, discount_function = 'all')
print(mod)
mod <- td_ipm(data = indiff_data, discount_function = c('exponential', 'hyperbolic', 'nonlinear-time-hyperbolic'))
print(mod)
plot(mod)
print(coef(mod)) # k value
print(BIC(mod)) # Bayesian information criterion
data("td_bc_single_ptpt")
mod <- kirby_score(td_bc_single_ptpt)
print(coef(mod))
data("td_bc_single_ptpt")
mod <- kirby_score(td_bc_single_ptpt)
print(coef(mod))
mod <- td_bclm(td_bc_single_ptpt, method = 'all')
td_bc_single_ptpt
mod <- td_bclm(td_bc_single_ptpt, model = 'all')
print(mod)
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'all')
plot(mod)
plot(mod, log = 'x')
plot(mod, log = 'x', verbose = F)
View(nonsys)
View(td_fn)
list(`(i)` = 1)
names(list(`(i)` = 1))
print(nonsys(mod))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'model-free')
print(nonsys(mod))
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'model-free')
print(nonsys(mod)) # Model violates neither criterion; no non-systematic discounting detected
plot(mod)
mod <- td_bcnm(td_bc_single_ptpt, discount_function = 'model-free')
print(nonsys(mod)) # Model violates neither criterion; no non-systematic discounting detected
print(AUC(mod))
devtools::build_readme()
devtools::build_readme()
adj_amt_indiffs()
data("adj_amt_sim") # Load simulated data from an adjusting amounts procedure
indiff_data <- adj_amt_indiffs(adj_amt_sim)
devtools::build_readme()
