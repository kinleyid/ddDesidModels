df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
df <- data.frame(val_imm = seq(1, 99, length.out = 20), val_del = 100, del = rep(exp(1:10), each=20))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(0.8*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
dev.off()
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 1000)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 2000)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 100)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
dev.off()
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = 500)
df
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
df
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
gamma <- 5
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- ddDesidModels::dd_prob_model(df)
print(mod$discount_function_name) # should usually be "hyperbolic"
# Generate data
for (gamma in c(5, 0.5)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
gamma <- 5
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm)
}
dev.off()
# Generate data
for (gamma in c(5, 0.5)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm)
}
# Generate data
for (gamma in c(5, 0.1)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm, type = 'l')
}
# Generate data
for (gamma in c(5, 0.1)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
plot(prob ~ df$val_imm)
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm, type = 'l')
}
# Generate data
for (gamma in c(5, 0.1)) {
df <- data.frame(val_imm = seq(1, 99, length.out = 100), val_del = 100, del = 500)
prob <- logistic(gamma*(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))) # hyperbolic discounting
plot(prob ~ df$val_imm, type = 'l')
for (dplus in c(T, F)) {
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df, dplus = dplus)
p_imm <- predict_prob_imm(mod)
plot(p_imm ~ df$val_imm, type = 'l')
}
}
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
dev.off()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Plot predicted indifference points
delays <- exp(seq(0, 9, length.out = 100))
indiffs <- ddDesidModels::predict_indiffs(mod, del = delays)
plot(indiffs ~ delays, type = 'l')
# Plot predicted probabilities of selecting immediate reward
df <- data.frame(val_imm = 0:100, val_del = 100, del = 500)
p_imm <- ddDesidModels::predict_prob_imm(mod, data = df)
plot(p_imm ~ seq(0, 1, length.out = 101), type = 'l')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(prob)
dim1 <- rnorm(100)
dim2 <- rnorm(100)
plot(dim1 ~ dim2)
dim1 <- rnorm(100, sd = 1)
dim2 <- rnorm(100, sd = 1)
lims <- c(-5, 5)
plot(dim1 ~ dim2, xlim = lims, ylim = lims)
dim1 <- rnorm(100, sd = 2)
dim2 <- rnorm(100, sd = 2)
plot(dim1 ~ dim2, xlim = lims, ylim = lims)
devtools::load_all(".")
devtools::load_all(".")
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
ddDesidModels::dd_prob_model(data, discount_function = 'hyperbolic')
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
prob_mod_arg_permutations
nll_fn
optimized
ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
optimized <- optim(
fn = nll_fn,
par = param_vals[val_idx, ]
)
nll_f
nll_fn
param_vals
param_vals[val_idx, ]
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
# Fit model
mod <- dd_prob_model(df)
# Fit model
mod <- dd_prob_model(df)
optimized <- optim(
fn = nll_fn,
par = param_vals[val_idx, ]
)
optimize
optimized
best_optimized
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
# Fit model
mod <- dd_prob_model(df)
best_output
best_output$discount_function()
best_output$discount_function_name
best_output$ED50 <- switch(
best_ouput$discount_function_name,
"mazur"= 1/up$k,
"samuelson"= log(2)/up$k,
"myerson-green" = (2^(1/up$s) - 1) / up$k,
"rachlin" = (1/up$k) ^ (1/up$s),
"ebert-prelec" = (log(2)/up$k)^(1/up$s),
"laibson" = log(2*up$w)/up$k,
"bos-mcclure" = NA
)
best_output
best_output$discount_function_name
switch(
best_ouput$discount_function_name,
"mazur"= 1/up$k,
"samuelson"= log(2)/up$k,
"myerson-green" = (2^(1/up$s) - 1) / up$k,
"rachlin" = (1/up$k) ^ (1/up$s),
"ebert-prelec" = (log(2)/up$k)^(1/up$s),
"laibson" = log(2*up$w)/up$k,
"bos-mcclure" = NA
)
best_output$ED50 <- switch(
best_output$discount_function_name,
"mazur"= 1/up$k,
"samuelson"= log(2)/up$k,
"myerson-green" = (2^(1/up$s) - 1) / up$k,
"rachlin" = (1/up$k) ^ (1/up$s),
"ebert-prelec" = (log(2)/up$k)^(1/up$s),
"laibson" = log(2*up$w)/up$k,
"bos-mcclure" = NA
)
devtools::load_all(".")
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
mod
# Fit model
mod <- dd_prob_model(df)
best_output$discount_function_name
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df)
mod$ED50
names(mod$ED50)
names(mod$ED50) <- c()
mod$ED50
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
x <- ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
names(data)
names(df)
paste(names(df), collapse = ', ')
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
devtools::load_all(".")
x <- ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
df$imm_chosen <- runif(nrow(df)) < prob
x <- ddDesidModels::dd_prob_model(data = df, discount_function = 'hyperbolic')
x$ED50
#' # Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperb')
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
indiffs <- predict_indiffs(mod)
plot(indiffs ~ log(mod$data$del), type = 'l')
plot(indiffs ~ log(mod$data$del), type = 'l')
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
indiffs <- predict_indiffs(mod)
plot(indiffs ~ mod$data$del, type = 'l')
mod$ED50
predict_indiffs(mod, del = mod$ED50)
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
mod$ED50
mod$ED50
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
devtools::load_all(".")
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperbolic')
mod$ED50
# Fit model
mod <- dd_prob_model(df, discount_function = 'hyperboic')
devtools::load_all(".")
debugSource("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
plot(mod_indiffs ~ dels, type = 'l')
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels)
indiffs <- function(x) 1 / (1 + 0.001*x)
lines(indiffs(dels) ~ dels)
dev.off()
lines(indiffs(dels) ~ dels, col = 'red')
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels, col = 'red')
print(predict_indiffs(mod, del = mod$ED50))
mod$ED50
mod$ED50
print(predict_indiffs(mod, del = c(1,2,3)))
print(predict_indiffs(mod, del = mod$ED50)
)
predict_indiffs(mod, del = mod$ED50)
indiffs
dek
del
predict_indiffs(mod, del = 100)
indiffs
devtools::load_all(".")
predict_indiffs(mod, del = 100)
indiffs
devtools::load_all(".")
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels, col = 'red')
print(predict_indiffs(mod, del = mod$ED50))
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
# Fit models
for (curr_discount_function in all_discount_functions) {
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l')
lines(indiffs(dels) ~ dels, col = 'red')
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
}
devtools::load_all(".")
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
plot(mod_indiffs ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs(dels) ~ dels, col = 'red')
dev.off()
# Fit models
for (curr_discount_function in all_discount_functions) {
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs(dels) ~ dels, col = 'red')
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
}
devtools::load_all(".")
curr_discount_function <- 'dual-systems-exponential'
mod <- dd_prob_model(df, discount_function = curr_discount_function)
dd_prob_model(df, discount_function = curr_discount_function)
dd_prob_model(df, discount_function = curr_discount_function)
devtools::load_all(".")
dd_prob_model(df, discount_function = curr_discount_function)
cand <- 1
mod$discount_function(cand, mod$par)
# No analytic solution, therefore search iteratively
cand <- 1
# No analytic solution, therefore search iteratively
cand <- 1
while(mod$discount_function(cand, mod$par) > 0.5) {
cand <- cand*2
}
cand
cand
mod$discount_function(cand, mod$par)
mod$discount_function(cand/2, mod$par)
# No analytic solution, therefore search iteratively
optim_func <- function(cand) {
(mod$discount_function(cand, mod$par) - 0.5)**2
}
optim_func
optim(optim_func, 1)
# No analytic solution, therefore search iteratively
optim_func <- function(cand) {
(mod$discount_function(cand, mod$par) - 0.5)**2
}
optim(fn = optim_func, par = 1)
optim(fn = optim_func, par = 1, method = 'Brent')
optim(fn = optim_func, par = 1, method = 'BFGS')
devtools::load_all(".")
devtools::load_all(".")
dev.off()
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
curr_discount_function <- "nonlinear-time-exponential"
mod <- dd_prob_model(df, discount_function = curr_discount_function)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# Test each discount function
all_discount_functions <- c(
"hyperbolic",
"exponential",
"inverse-q-exponential",
"nonlinear-time-hyperbolic",
"scaled-exponential",
"dual-systems-exponential",
"nonlinear-time-exponential"
)
# Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
indiffs <- function(x) 1 / (1 + 0.001*x)
prob <- logistic(logit(df$val_imm / df$val_del) - logit(indiffs(df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
curr_discount_function <- "nonlinear-time-exponential"
mod <- dd_prob_model(df, discount_function = curr_discount_function)
curr_discount_function <- "dual-systems-exponential"
mod <- dd_prob_model(df, discount_function = curr_discount_function)
optimized
mod$discount_function(cand, optimized$par)
mod$discount_function(optimized$par, mod$par)
mod$discount_function(optimized$par, mod$par)
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
mod$ED50
mod$discount_function(mod$ED50, mod$untransformed_parameters)
mod$discount_function(mod$ED50, mod$par)
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
devtools::load_all(".")
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
devtools::load_all(".")
curr_discount_function <- "dual-systems-exponential"
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
# No analytic solution, therefore search iteratively
optim_func <- function(cand) {
(predict_indiffs(best_output, cand) - 0.5)**2
}
optimized <- optim(fn = optim_func, par = 1, method = 'BFGS')
best_output$ED50 <- optimized$par
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
mod_indiffs <- predict_indiffs(mod)
dels <- mod$data$del
plot(mod_indiffs ~ dels, type = 'l', ylim = c(0, 1))
lines(indiffs(dels) ~ dels, col = 'red')
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
curr_discount_function <- "dual-systems-exponential"
source("C:/Users/isaac/Projects/dd_fitting_package/tests/tests.R")
1e-20
devtools::load_all(".")
mod <- dd_prob_model(df, discount_function = curr_discount_function)
print(sprintf('%s: %s', curr_discount_function, predict_indiffs(mod, del = mod$ED50)))
1e-20
devtools::load_all(".")
