% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/td_fn.R
\name{td_fn}
\alias{td_fn}
\title{Temporal discount function}
\usage{
td_fn(
  predefined = c("hyperbolic", "exponential", "inverse-q-exponential",
    "nonlinear-time-hyperbolic", "scaled-exponential", "dual-systems-exponential",
    "nonlinear-time-exponential", "model-free", "noise"),
  name = NULL,
  fn = NULL,
  par_starts = NULL,
  par_lims = NULL,
  ED50 = NULL,
  par_chk = NULL
)
}
\arguments{
\item{predefined}{A string specifying one of the pre-defined discount functions}

\item{name}{Name of custom discount function}

\item{fn}{Function that takes a data.frame and a vector of named parameters and returns a vector of values between 0 and 1}

\item{par_starts}{A named list of vectors, each specifying possible starting values for a parameter to try when running optimization}

\item{par_lims}{A named list of vectors, each specifying the bounds to impose of a parameter}

\item{ED50}{A function which, given a named vector of parameters p, computes the ED50. If there is no closed-form solution, this should return the string "non-analytic". If the ED50 is not well-defined, this should return the string "none"}

\item{par_chk}{Optionally, this is a function that checks the parameters to ensure they meet some criteria. E.g., for the dual-systems-exponential discount function, we require k1 < k2.}
}
\value{
An object of class `td_fn`.
}
\description{
Get or create a discount function
}
\examples{
# Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
print(mod$discount_function)
}
