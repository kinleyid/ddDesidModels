% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prob-models.R
\name{dd_prob_model}
\alias{dd_prob_model}
\title{Probabilistic temporal discounting model}
\usage{
dd_prob_model(
  data,
  discount_function = c("all", "hyperbolic", "exponential", "inverse-q-exponential",
    "nonlinear-time-hyperbolic", "scaled-exponential", "dual-systems-exponential",
    "nonlinear-time-exponential", "model-free", "noise"),
  choice_rule = c("logistic", "probit", "power"),
  fixed_ends = F,
  fit_err_rate = F,
  robust = F,
  param_ranges = NULL,
  silent = T,
  ...
)
}
\arguments{
\item{data}{A data frame with columns `val_imm` and `val_del` for the values of the immediate and delayed rewards, `del` for the delay, and `imm_chosen` (Boolean) for whether the immediate reward was chosen}

\item{discount_function}{A vector of strings specifying the name of the discount functions to use.}

\item{choice_rule}{A string specifying whether the `'exponential'` (default) or `'power'` choice rule should be used.}

\item{fixed_ends}{A Boolean specifying whether the model should satisfy the desiderata that subjects should always prefer something over nothing (i.e., nonzero delayed reward over nothing) and the same reward sooner rather than later}

\item{param_ranges}{A list containing the starting values to try for each parameter. Defaults to `c(-5, 0, 5)` for most parameters}
}
\value{
A list from `optim` with additional components specifying the AIC, the ED50, the discount function, and the probabilistic model
}
\description{
Compute a probabilistic model for a single subject's temporal discounting
}
\note{
The `par` component of the output list is for internal use. For statistical analyses, use the `untransformed_parameters`. `par` contains the parameters after various transformations intended to keep them within certain bounds (e.g., k parameters should never be negative)
}
\examples{
# Generate data
df <- data.frame(val_imm = seq(1, 99, length.out = 10), val_del = 100, del = rep(exp(1:10), each=10))
logistic <- function(x) 1 / (1 + exp(-x))
logit <- function(x) log(x / (1 - x))
prob <- logistic(logit(df$val_imm / df$val_del) - logit(1 / (1 + 0.001*df$del)))
df$imm_chosen <- runif(nrow(df)) < prob
# Fit model
mod <- dd_prob_model(df)
print(mod$discount_function)
}
